{"version":3,"sources":["images/money-logo-green.png","images/money-logo .png","actions/index.js","pages/Login.js","components/ExpensesForm/index.jsx","components/Header/index.jsx","components/ExpensesTable/index.jsx","components/EditForm/index.jsx","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["module","exports","getCurrencies","acronym","type","Object","keys","filter","code","fetchCurrencies","callBack","state","dispatch","a","fetch","response","json","result","storeExpense","currencies","expense","exchangeRates","editExpense","actionState","EMAIL_REGEX","Login","props","handleChange","target","name","value","setState","validateLogin","password","email","validPassword","length","validEmail","test","isDisabled","handleSubmit","event","push","history","setUser","preventDefault","passwordType","this","className","src","Logo","alt","data-testid","onChange","placeholder","onClick","disabled","Component","connect","addEmail","METHODS_ARRAY","TAGS_ARRAY","INITIAL_STATE","currency","method","tag","description","id","ExpensesForm","expenses","mapOptions","arr","map","word","key","fetchAcronym","htmlFor","wallet","editExpen","Header","formatMoney","parseFloat","toLocaleString","style","total","TABLE_HEADERS","ExpensesTable","handleEditorMode","editorId","editMode","editorExpense","renderTableHeader","header","renderTableBody","delExpense","ask","toFixed","cellSpacing","cellPadding","actionId","EditForm","handleEdit","Wallet","updateTotal","editorMode","user","App","exact","path","component","sumTotal","forEach","expen","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eaa42b2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/money-logo-green.16c2e08e.png\";","module.exports = __webpack_public_path__ + \"static/media/money-logo .6aef8ac7.png\";","export const ADD_EMAIL = 'ADD_EMAIL';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const STORE_EXPENSE = 'STORE_EXPENSE';\nexport const DEL_EXPENSE = 'DEL_EXPENSE';\nexport const GET_TOTAL = 'GET_TOTAL';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const EDITOR_MODE = 'EDITOR_MODE';\nconst ALL_CURRENCIES_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const addEmail = (email) => ({ type: ADD_EMAIL, email });\n\nexport const getCurrencies = (acronym) => ({\n  type: GET_CURRENCIES,\n  acronym: Object.keys(acronym).filter((code) => code !== 'USDT'),\n});\n\nexport const fetchCurrencies = (callBack, state = {}) => async (dispatch) => {\n  const response = await fetch(ALL_CURRENCIES_URL);\n  const result = await response.json();\n\n  return dispatch(callBack(result, state));\n};\n\nexport const storeExpense = (currencies, expense) => ({\n  type: STORE_EXPENSE,\n  expense: { ...expense, exchangeRates: currencies },\n});\n\nexport const deleteExpense = (actionId) => ({ type: DEL_EXPENSE, actionId });\nexport const getTotal = () => ({ type: GET_TOTAL });\nexport const editorMode = (actionId, editorExpense) => ({\n  type: EDITOR_MODE,\n  actionId,\n  editorExpense,\n});\n\nexport const editExpense = (actionState) => ({ type: EDIT_EXPENSE, actionState });\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FaEye, FaEyeSlash } from 'react-icons/fa';\nimport { addEmail } from '../actions';\nimport Logo from '../images/money-logo-green.png';\nimport './Login.css';\n\nconst MIN_PASSWORD_CHAR = 6;\nconst EMAIL_REGEX = /\\S+@\\S+\\.\\S+/;\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      password: '',\n      isDisabled: true,\n      passwordType: 'password',\n    };\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value }, () => this.validateLogin());\n  }\n\n  validateLogin = () => {\n    const { password, email } = this.state;\n    const validPassword = password.length >= MIN_PASSWORD_CHAR;\n    const validEmail = EMAIL_REGEX.test(email);\n\n    this.setState({ isDisabled: !(validEmail && validPassword) });\n  }\n\n  handleSubmit = (event) => {\n    const { history: { push }, setUser } = this.props;\n    const { email } = this.state;\n    event.preventDefault();\n\n    setUser(email);\n    push('/carteira');\n  }\n\n  render() {\n    const { state: {\n      email,\n      password,\n      isDisabled,\n      passwordType }, handleChange, handleSubmit } = this;\n\n    return (\n      <div className=\"login-form-container\">\n        <form className=\"form\">\n          <img src={ Logo } alt=\"\" className=\"logo\" />\n          <input\n            type=\"text\"\n            data-testid=\"email-input\"\n            name=\"email\"\n            value={ email }\n            onChange={ handleChange }\n            className=\"input\"\n            placeholder=\"Digite o seu E-mail\"\n          />\n          <div>\n            <input\n              type={ passwordType }\n              data-testid=\"password-input\"\n              name=\"password\"\n              value={ password }\n              onChange={ handleChange }\n              className=\"input password\"\n              placeholder=\"Digite sua Senha\"\n            />\n            { passwordType === 'password'\n              ? (\n                <FaEye\n                  onClick={ () => this.setState({ passwordType: 'text' }) }\n                  className=\"eyes\"\n                />\n              )\n              : (\n                <FaEyeSlash\n                  onClick={ () => this.setState({ passwordType: 'password' }) }\n                  className=\"eyes\"\n                />\n              ) }\n          </div>\n          <button\n            type=\"submit\"\n            disabled={ isDisabled }\n            onClick={ handleSubmit }\n            className=\"login-button\"\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setUser: (email) => dispatch(addEmail(email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(),\n  setUser: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import PropTypes, { string } from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, storeExpense, editExpense } from '../../actions';\nimport './style.css';\n\nconst METHODS_ARRAY = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst TAGS_ARRAY = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\nconst INITIAL_STATE = {\n  value: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  description: '',\n  id: '',\n};\n\nclass ExpensesForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = INITIAL_STATE;\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    const { expenses } = this.props;\n\n    this.setState({\n      [name]: value,\n      id: expenses.length,\n    });\n  }\n\n  mapOptions = (arr) => {\n    const options = arr.map((word) => (\n      <option value={ word } key={ word }>{ word }</option>\n    ));\n\n    return options;\n  }\n\n  handleSubmit = (event) => {\n    const { state, props: { fetchAcronym } } = this;\n    event.preventDefault();\n\n    fetchAcronym(storeExpense, state);\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    const {\n      props: { currencies },\n      state: { value, currency, method, tag, description, id },\n      handleChange,\n      handleSubmit,\n    } = this;\n\n    return (\n      <div className=\"wallet-form-container\">\n        <form className=\"wallet-form\">\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              type=\"number\"\n              name=\"value\"\n              id=\"value\"\n              data-testid=\"value-input\"\n              onChange={ handleChange }\n              value={ value }\n            />\n          </label>\n          <label htmlFor=\"currencies\">\n            Moedas:\n            <select\n              name=\"currency\"\n              id=\"currencies\"\n              onChange={ handleChange }\n              value={ currency }\n              data-testid=\"currency-input\"\n            >\n              { this.mapOptions(currencies) }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Método de Pagamento:\n            <select\n              name=\"method\"\n              id=\"method\"\n              data-testid=\"method-input\"\n              onChange={ handleChange }\n              value={ method }\n            >\n              { this.mapOptions(METHODS_ARRAY) }\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Categoria:\n            <select\n              name=\"tag\"\n              id=\"tag\"\n              data-testid=\"tag-input\"\n              onChange={ handleChange }\n              value={ tag }\n            >\n              { this.mapOptions(TAGS_ARRAY) }\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              type=\"text\"\n              name=\"description\"\n              id=\"description\"\n              data-testid=\"description-input\"\n              onChange={ handleChange }\n              value={ description }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            onClick={ handleSubmit }\n            id={ id }\n            className=\"submit-btn\"\n          >\n            Adicionar despesa\n\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  currencies: wallet.currencies,\n  expenses: wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAcronym: (callBack, state) => dispatch(fetchCurrencies(callBack, state)),\n  editExpen: (state) => dispatch(editExpense(state)),\n});\n\nExpensesForm.propTypes = {\n  currencies: PropTypes.arrayOf(string),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesForm);\n","import React, { Component } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport Logo from '../../images/money-logo .png';\nimport './style.css';\n\nclass Header extends Component {\n  formatMoney = (value) => parseFloat(value)\n    .toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });\n\n  render() {\n    const { props: { email, total }, formatMoney } = this;\n\n    return (\n      <header className=\"header-container\">\n        <img src={ Logo } alt=\"\" className=\"header-logo\" />\n        <div>\n          <p data-testid=\"email-field\">{ email }</p>\n          <span\n            data-testid=\"total-field\"\n          >\n            {\n              total > 0\n                ? formatMoney(total)\n                : formatMoney(0)\n            }\n          </span>\n          <span data-testid=\"header-currency-field\">BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(object),\n}.isRequired;\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport { BsTrashFill } from 'react-icons/bs';\nimport { FaEdit } from 'react-icons/fa';\nimport { connect } from 'react-redux';\nimport { deleteExpense, editorMode } from '../../actions';\nimport './style.css';\n\nconst TABLE_HEADERS = [\n  'Descrição',\n  'Tag',\n  'Método de pagamento',\n  'Valor',\n  'Moeda',\n  'Câmbio utilizado',\n  'Valor convertido',\n  'Moeda de conversão',\n  'Editar/Excluir'];\nclass ExpensesTable extends Component {\n  handleEditorMode = (editorId) => {\n    const { expenses, editMode } = this.props;\n    const editorExpense = expenses\n      .filter(({ id }) => id === editorId);\n    editMode(editorId, editorExpense);\n  }\n\n  renderTableHeader = () => TABLE_HEADERS\n    .map((header) => <th key={ header }>{ header }</th>);\n\n  renderTableBody = () => {\n    const { expenses, delExpense } = this.props;\n\n    const tbody = expenses\n      .map(({ value, currency, method, tag, description, exchangeRates, id }) => {\n        const { ask, name } = exchangeRates[currency];\n\n        return (\n          <tr key={ id }>\n            <td>{ description }</td>\n            <td>{ tag }</td>\n            <td>{ method }</td>\n            <td>{ parseFloat(value).toFixed(2) }</td>\n            <td>{ name }</td>\n            <td>{ parseFloat(ask).toFixed(2) }</td>\n            <td>{ (ask * value).toFixed(2) }</td>\n            <td>Real</td>\n            <td>\n              <button\n                type=\"button\"\n                data-testid=\"edit-btn\"\n                onClick={ () => this.handleEditorMode(id) }\n                className=\"edit\"\n              >\n                <FaEdit />\n              </button>\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => delExpense(id) }\n                className=\"delet\"\n              >\n                <BsTrashFill />\n              </button>\n            </td>\n          </tr>\n        );\n      });\n\n    return tbody;\n  }\n\n  render() {\n    return (\n      <div className=\"table-container\">\n        <table cellSpacing=\"0\" cellPadding=\"0\">\n          <thead>\n            <tr key=\"\">\n              { this.renderTableHeader() }\n            </tr>\n          </thead>\n          <tbody>\n            { this.renderTableBody() }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  delExpense: (id) => dispatch(deleteExpense(id)),\n  editMode: (id, expense) => dispatch(editorMode(id, expense)),\n});\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(object),\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(ExpensesTable);\n","import React, { Component } from 'react';\nimport PropTypes, { string } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { editExpense } from '../../actions';\n\nconst METHODS_ARRAY = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst TAGS_ARRAY = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\nclass EditForm extends Component {\n  constructor(props) {\n    super(props);\n\n    const { editorExpense } = this.props;\n    this.state = editorExpense;\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  mapOptions = (arr) => {\n    const options = arr.map((word) => (\n      <option value={ word } key={ word }>{ word }</option>\n    ));\n\n    return options;\n  }\n\n  handleEdit = (event) => {\n    const { state, props: { editExpen } } = this;\n    event.preventDefault();\n\n    editExpen(state);\n  }\n\n  render() {\n    const {\n      props: { currencies },\n      state: { value, currency, method, tag, description, id },\n      handleChange,\n      handleEdit,\n    } = this;\n    return (\n      <div className=\"wallet-form-container\">\n        <form className=\"wallet-form\">\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              type=\"number\"\n              name=\"value\"\n              id=\"value\"\n              data-testid=\"value-input\"\n              onChange={ handleChange }\n              value={ value }\n            />\n          </label>\n          <label htmlFor=\"currencies\">\n            Moedas:\n            <select\n              name=\"currency\"\n              id=\"currencies\"\n              onChange={ handleChange }\n              value={ currency }\n              data-testid=\"currency-input\"\n            >\n              { this.mapOptions(currencies) }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Método de Pagamento:\n            <select\n              name=\"method\"\n              id=\"method\"\n              data-testid=\"method-input\"\n              onChange={ handleChange }\n              value={ method }\n            >\n              { this.mapOptions(METHODS_ARRAY) }\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Categoria:\n            <select\n              name=\"tag\"\n              id=\"tag\"\n              data-testid=\"tag-input\"\n              onChange={ handleChange }\n              value={ tag }\n            >\n              { this.mapOptions(TAGS_ARRAY) }\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              type=\"text\"\n              name=\"description\"\n              id=\"description\"\n              data-testid=\"description-input\"\n              onChange={ handleChange }\n              value={ description }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            onClick={ handleEdit }\n            id={ id }\n            className=\"submit-btn\"\n          >\n            Editar despesa\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet }) => ({\n  currencies: wallet.currencies,\n  expenses: wallet.expenses,\n  editorId: wallet.editorId,\n  editorExpense: wallet.editorExpense,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  editExpen: (state) => dispatch(editExpense(state)),\n});\n\nEditForm.propTypes = {\n  currencies: PropTypes.arrayOf(string),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrencies, getCurrencies, getTotal } from '../actions';\nimport ExpensesForm from '../components/ExpensesForm';\nimport Header from '../components/Header';\nimport ExpensesTable from '../components/ExpensesTable';\nimport EditForm from '../components/EditForm';\nimport './Wallet.css';\n\nclass Wallet extends Component {\n  componentDidMount() {\n    const { fetchAcronym, updateTotal } = this.props;\n\n    fetchAcronym(getCurrencies);\n    updateTotal();\n  }\n\n  render() {\n    const { email, total, expenses, editorMode } = this.props;\n\n    return (\n      <div className=\"wallet\">\n        <Header email={ email } total={ total } />\n        { editorMode ? <EditForm /> : <ExpensesForm /> }\n        <ExpensesTable expenses={ expenses } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user, wallet }) => ({\n  email: user.email,\n  expenses: wallet.expenses,\n  total: wallet.total,\n  editorMode: wallet.editorMode,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchAcronym: (callBack) => dispatch(fetchCurrencies(callBack)),\n  updateTotal: () => dispatch(getTotal()),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { ADD_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, { type, email }) => {\n  switch (type) {\n  case ADD_EMAIL:\n    return {\n      ...state,\n      email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import {\n  DEL_EXPENSE,\n  EDITOR_MODE,\n  EDIT_EXPENSE,\n  GET_CURRENCIES,\n  GET_TOTAL,\n  STORE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  total: 0,\n  editorMode: false,\n  editorId: '',\n  editorExpense: {},\n};\n\nconst sumTotal = (expenses) => {\n  let total = 0;\n  expenses.forEach(({ exchangeRates, currency, value }) => {\n    const { ask } = exchangeRates[currency];\n    const mult = ask * value;\n    total += mult;\n  });\n  return total.toFixed(2);\n};\n\nconst editExpense = (actionState, { expenses, editorId }) => {\n  const editedExpenses = expenses.map((expen) => {\n    if (expen.id === editorId) {\n      return {\n        ...expen,\n        ...actionState,\n        id: editorId,\n      };\n    }\n    return expen;\n  });\n  return editedExpenses;\n};\n\nconst wallet = (state = INITIAL_STATE,\n  { type, acronym, expense, actionId, editorExpense, actionState }) => {\n  switch (type) {\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: acronym,\n    };\n  case STORE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, expense],\n      total: sumTotal([...state.expenses, expense]),\n    };\n  case DEL_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses\n        .filter(({ id }) => id !== actionId),\n      total: sumTotal(state.expenses\n        .filter(({ id }) => id !== actionId)),\n    };\n  case GET_TOTAL:\n    return {\n      ...state,\n      total: sumTotal(state.expenses),\n    };\n  case EDITOR_MODE:\n    return {\n      ...state,\n      editorMode: true,\n      editorId: actionId,\n      editorExpense: editorExpense[0],\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: editExpense(actionState, state),\n      total: sumTotal(editExpense(actionState, state)),\n      editorMode: false,\n      editorId: '',\n      editorExpense: {},\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}